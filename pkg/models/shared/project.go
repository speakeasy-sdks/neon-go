// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type Project struct {
	// Seconds. Control plane observed endpoints of this project being active this amount of wall-clock time.
	// The value has some lag.
	// The value is reset at the beginning of each billing period.
	//
	ActiveTimeSeconds int64 `json:"active_time_seconds"`
	// The logical size limit for a branch. The value is in MiB.
	//
	BranchLogicalSizeLimit int64 `json:"branch_logical_size_limit"`
	// The logical size limit for a branch. The value is in B.
	//
	BranchLogicalSizeLimitBytes int64 `json:"branch_logical_size_limit_bytes"`
	// Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
	// The value has some lag. The value is reset at the beginning of each billing period.
	// Examples:
	// 1. An endpoint that uses 1 CPU for 1 second is equal to `compute_time=1`.
	// 2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to `compute_time=2`.
	//
	ComputeTimeSeconds int64 `json:"compute_time_seconds"`
	// A date-time indicating when Neon Cloud plans to stop measuring consumption for current consumption period.
	//
	ConsumptionPeriodEnd time.Time `json:"consumption_period_end"`
	// A date-time indicating when Neon Cloud started measuring consumption for current consumption period.
	//
	ConsumptionPeriodStart time.Time `json:"consumption_period_start"`
	// DEPRECATED, use compute_time instead.
	//
	CPUUsedSec int64 `json:"cpu_used_sec"`
	// A timestamp indicating when the project was created
	//
	CreatedAt time.Time `json:"created_at"`
	// The project creation source
	//
	CreationSource string `json:"creation_source"`
	// Bytes-Hour. Project consumed that much storage hourly during the billing period. The value has some lag.
	// The value is reset at the beginning of each billing period.
	//
	DataStorageBytesHour int64 `json:"data_storage_bytes_hour"`
	// Bytes. Egress traffic from the Neon cloud to the client for given project over the billing period.
	// Includes deleted endpoints. The value has some lag. The value is reset at the beginning of each billing period.
	//
	DataTransferBytes int64 `json:"data_transfer_bytes"`
	// A collection of settings for a Neon endpoint
	DefaultEndpointSettings *DefaultEndpointSettings `json:"default_endpoint_settings,omitempty"`
	// The number of seconds to retain PITR backup history for this project.
	//
	HistoryRetentionSeconds int64 `json:"history_retention_seconds"`
	// The project ID
	//
	ID string `json:"id"`
	// A timestamp indicating when project maintenance begins. If set, the project is placed into maintenance mode at this time.
	//
	MaintenanceStartsAt *time.Time `json:"maintenance_starts_at,omitempty"`
	// The project name
	//
	Name    string            `json:"name"`
	Owner   *ProjectOwnerData `json:"owner,omitempty"`
	OwnerID string            `json:"owner_id"`
	// The major PostgreSQL version number. Currently supported version are `14` and `15`.
	PgVersion int64 `json:"pg_version"`
	// The cloud platform identifier. Currently, only AWS is supported, for which the identifier is `aws`.
	//
	PlatformID string `json:"platform_id"`
	// The Neon compute provisioner.
	//
	Provisioner Provisioner `json:"provisioner"`
	// The proxy host for the project. This value combines the `region_id`, the `platform_id`, and the Neon domain (`neon.tech`).
	//
	ProxyHost string `json:"proxy_host"`
	// DEPRECATED. Use `consumption_period_end` from the getProject endpoint instead.
	// A timestamp indicating when the project quota resets
	//
	QuotaResetAt *time.Time `json:"quota_reset_at,omitempty"`
	// The region identifier
	//
	RegionID string               `json:"region_id"`
	Settings *ProjectSettingsData `json:"settings,omitempty"`
	// Whether or not passwords are stored for roles in the Neon project. Storing passwords facilitates access to Neon features that require authorization.
	//
	StorePasswords bool `json:"store_passwords"`
	// Experimental. Do not use this field yet.
	// The data storage size in bytes.
	//
	SyntheticStorageSize *int64 `json:"synthetic_storage_size,omitempty"`
	// A timestamp indicating when the project was last updated
	//
	UpdatedAt time.Time `json:"updated_at"`
	// Bytes. Amount of WAL that travelled through storage for given project across all branches.
	// The value has some lag. The value is reset at the beginning of each billing period.
	//
	WrittenDataBytes int64 `json:"written_data_bytes"`
}
