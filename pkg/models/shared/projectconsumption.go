// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type ProjectConsumption struct {
	// Seconds. Control plane observed endpoints of this project being active this amount of wall-clock time.
	// The value has some lag.
	// The value is reset at the beginning of each billing period.
	//
	ActiveTimeSeconds int64 `json:"active_time_seconds"`
	// Seconds. The number of CPU seconds used by the project's compute endpoints, including compute endpoints that have been deleted.
	// The value has some lag. The value is reset at the beginning of each billing period.
	// Examples:
	// 1. An endpoint that uses 1 CPU for 1 second is equal to `compute_time=1`.
	// 2. An endpoint that uses 2 CPUs simultaneously for 1 second is equal to `compute_time=2`.
	//
	ComputeTimeSeconds int64 `json:"compute_time_seconds"`
	// Bytes-Hour. Project consumed that much storage hourly during the billing period. The value has some lag.
	// The value is reset at the beginning of each billing period.
	//
	DataStorageBytesHour int64 `json:"data_storage_bytes_hour"`
	// Bytes. Egress traffic from the Neon cloud to the client for given project over the billing period.
	// Includes deleted endpoints. The value has some lag. The value is reset at the beginning of each billing period.
	//
	DataTransferBytes int64 `json:"data_transfer_bytes"`
	// The project ID
	//
	ID string `json:"id"`
	// Bytes. Current space occupied by project in the storage. The value has some lag.
	//
	SyntheticStorageSize int64 `json:"synthetic_storage_size"`
	// A timestamp indicating when the project was last updated
	//
	UpdatedAt time.Time `json:"updated_at"`
	// Bytes. Amount of WAL that travelled through storage for given project across all branches.
	// The value has some lag. The value is reset at the beginning of each billing period.
	//
	WrittenDataBytes int64 `json:"written_data_bytes"`
}
